<#@ template language="C#" hostSpecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\iSynaptic.Languages.GrammarLanguage\bin\Debug\iSynaptic.Languages.GrammarLanguage.dll" #>
<#@ assembly name="$(SolutionDir)\iSynaptic.Languages.GrammarLanguage\bin\Debug\Sprache.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Sprache" #>
<#@ import namespace="iSynaptic.Languages.GrammarLanguage.Bootstrap" #>
<#@ import namespace="iSynaptic.Languages.GrammarLanguage.Bootstrap.Visitors" #>
<#@ include file="MultipleOutputHelper.ttinclude" #>
<#
	Action writeHeader = () => {
#>// The MIT License
// 
// Copyright (c) 2012 Jordan E. Terrell
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

<# };

	var manager = Manager.Create(Host, GenerationEnvironment);
	
	manager.StartHeader();
	writeHeader();
	manager.EndBlock();

	var assembly = typeof(iSynaptic.Languages.GrammarLanguage.Bootstrap.Parser).Assembly;
	string input = null;

	using(var stream = assembly.GetManifestResourceStream("iSynaptic.Languages.GrammarLanguage.GrammarLanguage.grammar"))
	using(var reader = new StreamReader(stream))
	{
		input = reader.ReadToEnd();
	}

	var tree = iSynaptic.Languages.GrammarLanguage.Bootstrap.Parser.Start().Parse(input);

	 StringWriter writer = new StringWriter(GenerationEnvironment);
	 var visitor = new AstModelVisitor();
	 visitor.Dispatch(tree);

	 foreach(var block in visitor.CodeBlocks)
	 {
		manager.StartNewFile(block.FileName);
		block.WriteTo(new StringWriter(GenerationEnvironment));
		manager.EndBlock();
	 }

	 manager.Process(true);
#>