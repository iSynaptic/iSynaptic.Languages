using System;

namespace iSynaptic
{
    namespace Languages
    {
        language GrammarLanguage
        {
            trivia Space = " ";
            trivia Tab = "\t";
        
            token UsingKeyword = "using";
            token AbstractKeyword = "abstract";
            token NamespaceKeyword = "namespace";
            token LanguageKeyword = "language";
            token InterleaveKeyword = "interleave";
            token TokenKeyword = "token";
            token NodeKeyword = "node";
            token InterfaceKeyword = "interface";
        
            token OpenBrace = "{";
            token CloseBrace = "}";
            token OpenBracket = "[";
            token CloseBracket = "]";
            token QuestionMark = "?";
            token PlusSign = "+";
            token MinusSign = "-";
            token Exclamation = "!";
            token Asterisk = "*";
            token EqualsSign = "=";
            token SemiColon = ";";
            token Underscore = "_";
            token RangeOperator = "..";
            token Period = ".";
            token Comma = ",";
            token Pipe = "|";
        
            node interface LanguageMember(NameSyntax name);
        
            abstract node NameSyntax;
        
            node LanguageDeclaration(
                LanguageKeyword,
                Identifier name,
                OpenBrace,
                LanguageMember* members,
                CloseBrace);
        
            node NamespaceDeclaration(
                NamespaceKeyword,
                Identifier name,
                OpenBrace,
                LanguageDeclaration* members,
                CloseBrace);
        }
    }
}